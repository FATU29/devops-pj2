pipeline {
    agent any
    
    environment {
        DOCKER_USERNAME = 'fatu29'
        DOCKER_PASSWORD = credentials('dockerhub-password')
    }
    
    stages {
        stage('Determine Changes') {
            steps {
                script {
                    // Lấy a danh sách file đã thay đổi trong commit
                    def changedFiles = sh(
                        script: "git diff --name-only HEAD^ HEAD",
                        returnStdout: true
                    ).trim().split("\n")
                    
                    // Danh sách các services cần kiểm tra
                    def services = ['config-server', 'discovery-server', 'api-gateway', 
                                   'customers-service', 'vets-service', 'visits-service', 
                                   'genai-service', 'admin-server']
                    
                    def serviceChanged = false
                    env.SERVICE_NAME = "none"
                    
                    // Kiểm tra xem có service nào thay đổi không
                    for (service in services) {
                        for (file in changedFiles) {
                            if (file.startsWith("spring-petclinic-${service}/")) {
                                serviceChanged = true
                                env.SERVICE_NAME = service
                                break
                            }
                        }
                        if (serviceChanged) break
                    }
                    
                    if (!serviceChanged) {
                        echo "Không phát hiện thay đổi trong các services, bỏ qua build"
                    } else {
                        echo "Phát hiện thay đổi trong service: ${env.SERVICE_NAME}"
                    }
                    
                    // Lưu branch hiện tại
                    env.BRANCH_NAME = sh(
                        script: "git rev-parse --abbrev-ref HEAD",
                        returnStdout: true
                    ).trim()
                    
                    // Lưu commit ID
                    env.COMMIT_ID = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Build and Test') {
            when {
                expression { return env.SERVICE_NAME != "none" }
            }
            steps {
                script {
                    def service = env.SERVICE_NAME
                    echo "Building service: ${service}"
                    
                    sh """
                    cd spring-petclinic-${service}
                    ./mvnw clean package -DskipTests
                    """
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            when {
                expression { return env.SERVICE_NAME != "none" }
            }
            steps {
                script {
                    def service = env.SERVICE_NAME
                    def imageTag = env.COMMIT_ID
                    
                    // Đăng nhập Docker
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    
                    // Build và push Docker image
                    sh """
                    cd spring-petclinic-${service}
                    
                    # Tạo Dockerfile nếu chưa có
                    if [ ! -f Dockerfile ]; then
                        echo "FROM eclipse-temurin:17-jre
WORKDIR /app
COPY target/*.jar app.jar
ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" > Dockerfile
                    fi
                    
                    # Build Docker image
                    docker build -t ${DOCKER_USERNAME}/petclinic-${service}:${imageTag} .
                    docker tag ${DOCKER_USERNAME}/petclinic-${service}:${imageTag} ${DOCKER_USERNAME}/petclinic-${service}:latest
                    
                    # Push lên Docker Hub
                    docker push ${DOCKER_USERNAME}/petclinic-${service}:${imageTag}
                    docker push ${DOCKER_USERNAME}/petclinic-${service}:latest
                    """
                    
                    echo "Image đã được push: ${DOCKER_USERNAME}/petclinic-${service}:${imageTag}"
                }
            }
        }
        
        // Thêm stage mới để tự động kích hoạt CD
        stage('Trigger CD') {
            when {
                expression { return env.SERVICE_NAME != "none" }
            }
            steps {
                script {
                    // Tải script auto-cd.groovy và thực thi
                    def autoCD = load 'scripts/auto-cd.groovy'
                    autoCD.triggerCDFromCI(env.SERVICE_NAME, env.BRANCH_NAME)
                    echo "Đã kích hoạt CD pipeline cho service ${env.SERVICE_NAME} từ branch ${env.BRANCH_NAME}"
                }
            }
        }
    }
    
    post {
        success {
            echo "CI Pipeline hoàn thành thành công!"
        }
        failure {
            echo "CI Pipeline thất bại!"
        }
    }
}
