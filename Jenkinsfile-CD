pipeline {
    agent any

    parameters {
        string(name: 'NAMESPACE', defaultValue: 'petclinic-dev', description: 'Kubernetes namespace')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for Config Server')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for Discovery Server')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for API Gateway')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for Customers Service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for Vets Service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for Visits Service')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for GenAI Service')
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for Admin Server')
    }

    environment {
        DOCKER_USERNAME = 'fatu29'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        MINIKUBE_HOME = '/var/lib/jenkins/.minikube'
    }

    stages {
        stage('Check Kubernetes Connection') {
            steps {
                script {
                    echo "Testing Kubernetes connection..."
                    sh "kubectl version --client || true"
                    sh "kubectl config view --minify || true"
                    sh "kubectl get nodes || true"
                }
            }
        }

        stage('Determine Tags') {
            steps {
                script {
                    def getTag = { branch ->
                        if (branch == 'main') return 'latest'
                        def hash = sh(
                            script: "git ls-remote origin ${branch} | head -1 | cut -f 1 | cut -c1-7",
                            returnStdout: true
                        ).trim()
                        return hash ?: 'latest'
                    }

                    env.CONFIG_SERVER_TAG = getTag(params.CONFIG_SERVER_BRANCH)
                    env.DISCOVERY_SERVER_TAG = getTag(params.DISCOVERY_SERVER_BRANCH)
                    env.API_GATEWAY_TAG = getTag(params.API_GATEWAY_BRANCH)
                    env.CUSTOMERS_SERVICE_TAG = getTag(params.CUSTOMERS_SERVICE_BRANCH)
                    env.VETS_SERVICE_TAG = getTag(params.VETS_SERVICE_BRANCH)
                    env.VISITS_SERVICE_TAG = getTag(params.VISITS_SERVICE_BRANCH)
                    env.GENAI_SERVICE_TAG = getTag(params.GENAI_SERVICE_BRANCH)
                    env.ADMIN_SERVER_TAG = getTag(params.ADMIN_SERVER_BRANCH)

                    echo "================ SERVICE TAGS ================"
                    echo "CONFIG_SERVER_TAG: ${env.CONFIG_SERVER_TAG}"
                    echo "DISCOVERY_SERVER_TAG: ${env.DISCOVERY_SERVER_TAG}"
                    echo "API_GATEWAY_TAG: ${env.API_GATEWAY_TAG}"
                    echo "CUSTOMERS_SERVICE_TAG: ${env.CUSTOMERS_SERVICE_TAG}"
                    echo "VETS_SERVICE_TAG: ${env.VETS_SERVICE_TAG}"
                    echo "VISITS_SERVICE_TAG: ${env.VISITS_SERVICE_TAG}"
                    echo "GENAI_SERVICE_TAG: ${env.GENAI_SERVICE_TAG}"
                    echo "ADMIN_SERVER_TAG: ${env.ADMIN_SERVER_TAG}"
                    echo "=============================================="
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Tạo namespace nếu chưa có
                    sh "kubectl create namespace ${params.NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"

                    // Hàm deploy từng service
                    def deployService = { name, tag ->
                        def upperTag = name.toUpperCase().replace('-', '_') + '_TAG'
                        echo "Deploying ${name}..."
                        sh """
                        cat k8s/templates/${name}.yaml | 
                        sed "s/\\\${NAMESPACE}/${params.NAMESPACE}/g" | 
                        sed "s/\\\${DOCKER_USERNAME}/${env.DOCKER_USERNAME}/g" | 
                        sed "s/\\\${${upperTag}}/${tag}/g" > k8s/deploy-${name}.yaml
                        
                        kubectl apply -f k8s/deploy-${name}.yaml
                        """
                    }

                    deployService('config-server', env.CONFIG_SERVER_TAG)
                    echo "Waiting for Config Server to start..."
                    sh "sleep 20"

                    deployService('discovery-server', env.DISCOVERY_SERVER_TAG)
                    echo "Waiting for Discovery Server to start..."
                    sh "sleep 20"

                    deployService('customers-service', env.CUSTOMERS_SERVICE_TAG)
                    deployService('vets-service', env.VETS_SERVICE_TAG)
                    deployService('visits-service', env.VISITS_SERVICE_TAG)
                    deployService('genai-service', env.GENAI_SERVICE_TAG)
                    echo "Waiting for services to start..."
                    sh "sleep 20"

                    deployService('api-gateway', env.API_GATEWAY_TAG)
                    deployService('admin-server', env.ADMIN_SERVER_TAG)
                }
            }
        }

        stage('Get Access Information') {
            steps {
                script {
                    def nodeIP = sh(script: 'sudo -u fat minikube ip', returnStdout: true).trim()
                    echo "=========================================================="
                    echo "Application deployed successfully!"
                    echo "Access the application at: http://${nodeIP}:30080"
                    echo "Add this to your hosts file: ${nodeIP} petclinic.test"
                    echo "=========================================================="
                }
            }
        }
    }
}
